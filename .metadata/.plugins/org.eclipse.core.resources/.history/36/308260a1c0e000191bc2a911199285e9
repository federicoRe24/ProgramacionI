#include "memoriaDinamica.h"
#include <iostream>

void ejemplo()
{

	int *p; // Puntero a entero p.

	p=new int; // Solicita memoria del heap de tamaño suficiente como para que se almacene un entero.

	/* Este espacio de memoria se manipulará desde p (notar que no tiene un identificador propio).
	Observar que la variable puntero p es estática, es decir, está en el Segmento de Datos, pero el espacio que se obtuvo mediante new
	corresponde al heap, que es memoria dinámica. La memoria dinámica se gestiona en tiempo de ejecución. */

	*p=3; // almacena 3 en el espacio de memoria generado, y cuya dirección está en p.

    // El manejo de la ‘memoria dinámica’ permite extender el espacio que el programa utiliza para datos, de la manera más eficiente.

	std::cout << p << std::endl;
	std::cout << *p << std::endl;

	delete p; // libera la memoria del heap cuya dirección estaba almacenada en p.

	std::cout << p << std::endl;

	std::cout << *p << std::endl; // La memoria fue liberada y el contenido de ese espacio de memoria vuelve a ser 0 ó 1.

	// ----------------------------------------------------------------------------------------------------------------------------------

	std::cout << "Ejemplo2" << std::endl;

	float *r, *q;

	r=  new float;

	*r= 5.3;

	std::cout << *r << std::endl;
	//std::cout << *q << std::endl;

	q=r; //  r y q están apuntando a la misma dirección

	*q= 2.4; //esa dirección contiene 2.4

	std::cout << *r << std::endl;
	std::cout << *q << std::endl;

	q= new float;

	*q=8.1; // Ahora tenemos a r y q apuntando a dos direcciones distintas; una contiene 2.4 y la otra 8 .1

	std::cout << *r << std::endl;
	std::cout << *q << std::endl;

	delete r; // Liberamos la memoria obtenida mediante new

	delete q; // Al haber liberado a r,  ya no podamos volver utilizar la expresión *r

	std::cout << *r << std::endl;
	std::cout << *q << std::endl;

	// ----------------------------------------------------------------------------------------------------------------------------------

	std::cout << "Array dinámico" << std::endl;

	p= new int [20]; // Un array dinámico es un vector que se genera en tiempo de ejecución.

	/*Luego, podemos referirnos a cada una de las 20 componentes del array

	mediante

	p[0], p[1], etc

	o bien mediante

	Luego de usado, liberamos el espacio de memoria que usó el array mediante:

	delete [] p;*/


}




